// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/postInst": {
            "post": {
                "description": "이 API는 다양한 작업을 실행하는 명령어를 포함합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "ExecutePayLoad ExecuteCleanUp GetSystemInfo GetApplication StopAgent",
                "operationId": "get-struct-array2-by-string",
                "parameters": [
                    {
                        "description": "request job. 'Action' 필드에는 'ExecutePayLoad', 'ExecuteCleanUp', 'GetSystemInfo', 'GetApplication', 'StopAgent', 'ChangeProtocolToTCP', 'ChangeProtocolToHTTP' 값이 들어갈 수 있습니다.",
                        "name": "loginUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.InstructionD"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/updateNickname": {
            "post": {
                "description": "This API updates the nickname of an agent identified by its UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Update the nickname of an agent",
                "operationId": "update-nickname",
                "parameters": [
                    {
                        "description": "Update NickName request. 'AgentUUID' is the identifier of the agent, and 'NickName' is the new nickname.",
                        "name": "updateNicknameRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.UpdateNicknameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NickName updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request: JSON parsing failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to connect to the database or update NickName",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/view/ApplicationDB": {
            "get": {
                "description": "Retrieves application database records by UUID, or all records if no UUID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationDB"
                ],
                "summary": "Get application database records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application UUID",
                        "name": "uuid",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/view/JobDataDB": {
            "get": {
                "description": "Retrieves all job data from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JobDataDB"
                ],
                "summary": "Get all job data",
                "responses": {}
            }
        },
        "/view/OperationLogDB": {
            "get": {
                "description": "Retrieves all operation logs from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OperationLogDB"
                ],
                "summary": "Get all operation logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent UUID",
                        "name": "uuid",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/view/SystemInfoDB": {
            "get": {
                "description": "Retrieves system information records by UUID, or all records if no UUID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SystemInfoDB"
                ],
                "summary": "Get system information records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "System UUID",
                        "name": "uuid",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/view/agentStatus": {
            "get": {
                "description": "Retrieves agent status by UUID, or all agents if no UUID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AgentStatus"
                ],
                "summary": "Get agent status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent UUID",
                        "name": "uuid",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "router.InstructionD": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "default": "ExecutePayLoad"
                },
                "agentUUID": {
                    "type": "string",
                    "default": "5610eb3154c742d4bc95ce9194166ac4"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "procedureID": {
                    "type": "string",
                    "default": "P_Collection_0001"
                }
            }
        },
        "router.UpdateNicknameRequest": {
            "type": "object",
            "properties": {
                "agentUUID": {
                    "type": "string"
                },
                "nickName": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "httpsbas.com:8002",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
